#include "gfp.h"

TEXT ·gfpNeg(SB),0,$0-16
	MOVQ ·p+0(SB), R8
	MOVQ ·p+8(SB), R9
	MOVQ ·p+16(SB), R10
	MOVQ ·p+24(SB), R11
	MOVQ ·p+32(SB), R12
	MOVQ ·p+40(SB), R13

	MOVQ a+8(FP), DI
	SUBQ 0(DI), R8
	SBBQ 8(DI), R9
	SBBQ 16(DI), R10
	SBBQ 24(DI), R11
	SBBQ 32(DI), R12
	SBBQ 40(DI), R13

	MOVQ $0, R14
	gfpCarry(R8,R9,R10,R11,R12,R13,R14, R15,AX,BX,CX,DX,DI,SI)

	MOVQ c+0(FP), DI
	storeBlock(R8,R9,R10,R11,R12,R13, 0(DI))
	RET

TEXT ·gfpAdd(SB),0,$0-24
	MOVQ a+8(FP), DI
	MOVQ b+16(FP), SI

	loadBlock(0(DI), R8,R9,R10,R11,R12,R13)
	MOVQ $0, R14

	ADDQ  0(SI), R8
	ADCQ  8(SI), R9
	ADCQ 16(SI), R10
	ADCQ 24(SI), R11
	ADCQ 32(SI), R12
	ADCQ 40(SI), R13
	ADCQ $0, R14

	gfpCarry(R8,R9,R10,R11,R12,R13,R14, R15,AX,BX,CX,DX,DI,SI)

	MOVQ c+0(FP), DI
	storeBlock(R8,R9,R10,R11,R12,R13, 0(DI))
	RET

TEXT ·gfpSub(SB),0,$0-24
	// TODO(brendan): Directly subtract.
	MOVQ ·p+0(SB), R8
	MOVQ ·p+8(SB), R9
	MOVQ ·p+16(SB), R10
	MOVQ ·p+24(SB), R11
	MOVQ ·p+32(SB), R12
	MOVQ ·p+40(SB), R13

	MOVQ b+16(FP), DI
	SUBQ 0(DI), R8
	SBBQ 8(DI), R9
	SBBQ 16(DI), R10
	SBBQ 24(DI), R11
	SBBQ 32(DI), R12
	SBBQ 40(DI), R13

	MOVQ $0, R14
	gfpCarry(R8,R9,R10,R11,R12,R13,R14, R15,AX,BX,CX,DX,DI,SI)
	MOVQ $0, R14

	MOVQ a+8(FP), DI
	ADDQ 0(DI), R8
	ADCQ 8(DI), R9
	ADCQ 16(DI), R10
	ADCQ 24(DI), R11
	ADCQ 32(DI), R12
	ADCQ 40(DI), R13
	ADCQ $0, R14

	gfpCarry(R8,R9,R10,R11,R12,R13,R14, R15,AX,BX,CX,DX,DI,SI)

	MOVQ c+0(FP), DI
	storeBlock(R8,R9,R10,R11,R12,R13, 0(DI))
	RET

TEXT ·gfpMul(SB),0,$96-24
	MOVQ a+8(FP), DI
	MOVQ b+16(FP), SI

	// T = a * b
	mul(0(DI), 0(SI))

	MOVQ c+0(FP), DI

	MOVQ  0(SP),  AX
	MOVQ AX, 0(DI)

	MOVQ  8(SP),  AX
	MOVQ AX,   8(DI)

	MOVQ 16(SP),  AX
	MOVQ AX,  16(DI)

	MOVQ 24(SP),  AX
	MOVQ AX,  24(DI)

	MOVQ 32(SP),   AX
	MOVQ AX, 32(DI)

	MOVQ 40(SP),   AX
	MOVQ AX, 40(DI)

	MOVQ 48(SP),   AX
	MOVQ AX, 48(DI)

	MOVQ 56(SP),   AX
	MOVQ AX, 56(DI)

	MOVQ 64(SP),   AX
	MOVQ AX, 64(DI)

	MOVQ 72(SP),   AX
	MOVQ AX, 72(DI)

	MOVQ 80(SP),   AX
	MOVQ AX, 80(DI)

	MOVQ 88(SP),   AX
	MOVQ AX, 88(DI)

	RET
